diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..dc207df
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "locks.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..a822569 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..b6785a4 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(uint64 fcn, uint64 ar, uint64 stack);
+void            thread_exit(void);
+int             thread_join(int thread_id);
+void            new_sleep(uint64 ar);
+void            new_wakeup(int pid);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,6 +170,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64); // Change_Offline_5
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
@@ -173,6 +179,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             modified_copyout(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..b5677fd 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -158,8 +158,16 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  if(p->pagetable && p->is_thread==0)
     proc_freepagetable(p->pagetable, p->sz);
+
+  // Change_Offline_5
+  if(p->pagetable && p->is_thread==1){
+    if(p->sz > 0)
+      uvmunmap(p->pagetable, 0, PGROUNDUP(p->sz)/PGSIZE, 0);
+    // freewalk(p->pagetable);
+  }
+
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -681,3 +689,183 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+thread_create(uint64 fcn, uint64 ar, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Change_Offline_5 Mirror user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Change_Offline_5 Cause fork to return 0 in the child.
+  np->trapframe->a0 = ar;
+
+  // Change_Offline_5 sets the program counter to the start of the function
+  np->trapframe->epc = fcn;
+
+  // Change_Offline_5 set stack pointer
+  np->trapframe->sp = stack+4096;
+
+  // Change_offline_5
+   np->is_thread = 1;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+// Change_Offline_5
+void
+thread_exit(void)
+{
+  struct proc *p = myproc();
+
+  if(p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+
+  acquire(&p->lock);
+
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
+
+int thread_join(int thread_id){
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+        pp->pid = thread_id;
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+void
+new_sleep(uint64 lk)
+{
+  struct proc *p = myproc();
+
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+  modified_copyout(p->pagetable, lk);
+
+  // Go to sleep.
+  p->state = SLEEPING;
+
+  sched();
+
+  // Reacquire original lock.
+  release(&p->lock);
+  //acquire(lk);
+}
+
+void
+new_wakeup(int pid)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->pid == pid) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..2683927 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int is_thread;              // Change 5 offline
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..893adab 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_new_sleep(void);
+extern uint64 sys_new_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_new_sleep] sys_new_sleep,
+[SYS_new_wakeup] sys_new_wakeup,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..1cd950e 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,27 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
+#define SYS_fork 1
+#define SYS_exit 2
+#define SYS_wait 3
+#define SYS_pipe 4
+#define SYS_read 5
+#define SYS_kill 6
+#define SYS_exec 7
+#define SYS_fstat 8
+#define SYS_chdir 9
+#define SYS_dup 10
 #define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
+#define SYS_sbrk 12
+#define SYS_sleep 13
 #define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
+#define SYS_open 15
+#define SYS_write 16
+#define SYS_mknod 17
 #define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_link 19
+#define SYS_mkdir 20
+#define SYS_close 21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_new_sleep 25
+#define SYS_new_wakeup 26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..018ac1f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,46 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, ar, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &ar);
+  argaddr(2, &stack);
+  return thread_create(fcn, ar, stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int thread_id;
+  argint(0,&thread_id);
+  return thread_join(thread_id);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;
+}
+
+uint64
+sys_new_sleep(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  new_sleep(addr);
+  return 0;
+}
+
+uint64
+sys_new_wakeup(void)
+{
+  int pid;
+  argint(0, &pid);
+  new_wakeup(pid);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..c69cce7 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -437,3 +437,42 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+ // Change_Offline_5
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+int
+modified_copyout(pagetable_t pagetable, uint64 dstva)
+{
+  uint64 va0, pa0;
+  va0 = PGROUNDDOWN(dstva);
+  pa0 = walkaddr(pagetable, va0);
+  if(pa0 == 0)
+    return -1;
+  __sync_synchronize();
+  __sync_lock_release((uint8*)(pa0+(dstva-va0)));
+  return 0;
+}
\ No newline at end of file
diff --git a/locked b/locked
new file mode 100644
index 0000000..e69de29
diff --git a/pid b/pid
new file mode 100644
index 0000000..e69de29
diff --git a/user/conditional_variable.h b/user/conditional_variable.h
new file mode 100644
index 0000000..961415c
--- /dev/null
+++ b/user/conditional_variable.h
@@ -0,0 +1,72 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "user/user.h"
+#include "user/locks.h"
+
+struct Queue {
+    int arr[16];
+    int front;
+    int rear;
+    int size;
+};
+
+void initQueue(struct Queue *q) {
+    q->front = 0;
+    q->rear = 0;
+    q->size = 0;
+}
+
+void push(struct Queue *q, int x) {
+    q->arr[q->rear] = x;
+    q->rear = (q->rear + 1) % 16;
+    q->size++;
+}
+
+int front(struct Queue *q) {
+    if (q->size == 0)
+        return -1;
+    return q->arr[q->front];
+}
+
+void pop(struct Queue *q) {
+    q->front = (q->front + 1) % 16;
+    if (q->size == 0)
+        return;
+    else
+        q->size--;
+}
+
+struct conditional_var {
+    struct Queue q;
+    struct thread_mutex mx;
+};
+
+void conditional_init(struct conditional_var *cv){
+    initQueue(&cv->q);
+    thread_mutex_init(&cv->mx);
+}
+
+void thread_wait (struct conditional_var *c, struct thread_mutex *m)
+{
+    thread_mutex_lock(&c->mx);
+    int pid = getpid();
+    push(&c->q, pid);
+    thread_mutex_unlock(&c->mx);
+    new_sleep(&m->locked);
+    return;
+}
+
+void signal (struct conditional_var *c)
+  {
+    int tid;
+
+    thread_mutex_lock (&c->mx); /* protect the queue */
+    tid = front(&c->q);
+    pop(&c->q);
+    thread_mutex_unlock (&c->mx);
+
+    if (tid>0)
+      new_wakeup(tid);
+
+    return;
+  }
\ No newline at end of file
diff --git a/user/locks.h b/user/locks.h
new file mode 100644
index 0000000..4fb34dc
--- /dev/null
+++ b/user/locks.h
@@ -0,0 +1,126 @@
+#include "kernel/types.h"
+
+struct thread_spinlock {
+  uint8 locked;       // Is the lock held?
+
+  // For debugging:
+  int pid;   // The process holding the lock.
+};
+
+struct thread_mutex {
+  uint8 locked;       // Is the lock held?
+
+  // For debugging:
+  int pid;   // The process holding the lock.
+};
+
+void thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+  lk->pid = 0;
+}
+
+void thread_mutex_init(struct thread_mutex *lk)
+{
+  lk->locked = 0;
+  lk->pid = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void thread_spin_lock(struct thread_spinlock *lk)
+{
+//   push_off(); // disable interrupts to avoid deadlock.
+//   if(holding(lk))
+//     panic("acquire");
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->pid = getpid();
+}
+
+void thread_mutex_lock(struct thread_mutex *lk)
+{
+//   push_off(); // disable interrupts to avoid deadlock.
+//   if(holding(lk))
+//     panic("acquire");
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    sleep(1);
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->pid = getpid();
+}
+
+// Release the lock.
+void thread_spin_unlock(struct thread_spinlock *lk)
+{
+//   if(!holding(lk))
+//     panic("release");
+
+  lk->pid = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+}
+
+void thread_mutex_unlock(struct thread_mutex *lk)
+{
+//   if(!holding(lk))
+//     panic("release");
+
+  lk->pid = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..86a8d3e
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,89 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "semaphore.h"
+
+struct Queue q;
+// a mutex object lock
+// a semaphore object empty
+// a semaphore object full
+struct thread_mutex mx;
+struct sem_t empty;
+struct sem_t full;
+struct thread_spinlock lock;
+
+void ProducerFunc(void * arg)
+{
+	thread_spin_lock(&lock);
+	printf("%s\n",(char*)arg);
+	thread_spin_unlock(&lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+        sem_wait(&empty);
+		// wait for mutex lock
+		thread_mutex_lock(&mx);
+		sleep(1);
+		push(&q,i);
+		printf("producer produced item %d\n",i);
+		thread_mutex_unlock(&mx);
+		// unlock mutex lock
+        sem_post(&full);
+		// post semaphore full
+	}
+    thread_exit();
+}
+
+void ConsumerFunc(void * arg)
+{
+	thread_spin_lock(&lock);
+	printf("%s\n",(char*)arg);
+	thread_spin_unlock(&lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore full
+        sem_wait(&full);
+		// wait for mutex lock
+		thread_mutex_lock(&mx);
+
+		sleep(1);
+		int item = front(&q);
+		pop(&q);
+		printf("consumer consumed item %d\n",item);
+
+        thread_mutex_unlock(&mx);
+		// unlock mutex lock
+         sem_post(&empty);
+		// post semaphore empty
+	}
+    thread_exit();
+}
+
+int main(void)
+{
+
+	sem_init(&empty,5);
+    sem_init(&full,0);
+	thread_mutex_init(&mx);
+	thread_spin_init(&lock);
+    initQueue(&q);
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+	int thread1, thread2;
+
+	s1 = malloc(4096);
+	s2 = malloc(4096);
+
+	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+	thread2 = thread_create(ConsumerFunc, (void*)message2, s2);
+
+	thread_join(thread1);
+	thread_join(thread2);
+
+	exit(0);
+}
\ No newline at end of file
diff --git a/user/semaphore.h b/user/semaphore.h
new file mode 100644
index 0000000..0baa1f1
--- /dev/null
+++ b/user/semaphore.h
@@ -0,0 +1,35 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "user/user.h"
+#include "user/conditional_variable.h"
+
+struct sem_t {
+    int count;
+    struct thread_mutex m;
+    struct conditional_var cv;
+};
+
+int sem_init(struct sem_t *s, int value) {
+    s->count = value;
+    thread_mutex_init(&s->m);
+    conditional_init(&s->cv);
+    return 0;
+}
+
+void sem_post(struct sem_t *s) {
+    thread_mutex_lock(&s->m);
+    s->count++;
+    signal(&s->cv); /* See note */
+    /* A woken thread must acquire the lock, so it will also have to wait until we call unlock */
+
+    thread_mutex_unlock(&s->m);
+}
+
+void sem_wait(struct sem_t *s) {
+    thread_mutex_lock(&s->m);
+    while (s->count == 0) {
+        thread_wait(&s->cv, &s->m); /*unlock mutex, wait, relock mutex */
+    }
+    s->count--;
+    thread_mutex_unlock(&s->m);
+}
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..1cf17c9
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,71 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/locks.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+    struct balance *b = (struct balance*) arg;
+    thread_spin_lock(&lock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_spin_unlock(&lock);
+
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+         thread_spin_lock(&lock);
+        //  thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	//  if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         thread_spin_unlock(&lock);
+        //  thread_mutex_unlock(&mlock);
+
+    }
+
+    printf( "Done s:%x\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..9783fc9 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,41 +1,45 @@
 struct stat;
-
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
-int wait(int*);
-int pipe(int*);
-int write(int, const void*, int);
-int read(int, void*, int);
+int wait(int *);
+int pipe(int *);
+int write(int, const void *, int);
+int read(int, void *, int);
 int close(int);
 int kill(int);
-int exec(const char*, char**);
-int open(const char*, int);
-int mknod(const char*, short, short);
-int unlink(const char*);
-int fstat(int fd, struct stat*);
-int link(const char*, const char*);
-int mkdir(const char*);
-int chdir(const char*);
+int exec(const char *, char **);
+int open(const char *, int);
+int mknod(const char *, short, short);
+int unlink(const char *);
+int fstat(int fd, struct stat *);
+int link(const char *, const char *);
+int mkdir(const char *);
+int chdir(const char *);
 int dup(int);
 int getpid(void);
-char* sbrk(int);
+char *sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void (*fcn)(void *), void *arg, void *stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+int new_sleep(uint8 *);
+void new_wakeup(int pid);
 
 // ulib.c
-int stat(const char*, struct stat*);
-char* strcpy(char*, const char*);
-void *memmove(void*, const void*, int);
-char* strchr(const char*, char c);
-int strcmp(const char*, const char*);
-void fprintf(int, const char*, ...);
-void printf(const char*, ...);
-char* gets(char*, int max);
-uint strlen(const char*);
-void* memset(void*, int, uint);
-void* malloc(uint);
-void free(void*);
-int atoi(const char*);
+int stat(const char *, struct stat *);
+char *strcpy(char *, const char *);
+void *memmove(void *, const void *, int);
+char *strchr(const char *, char c);
+int strcmp(const char *, const char *);
+void fprintf(int, const char *, ...);
+void printf(const char *, ...);
+char *gets(char *, int max);
+uint strlen(const char *);
+void *memset(void *, int, uint);
+void *malloc(uint);
+void free(void *);
+int atoi(const char *);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..1e071ef 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("new_sleep");
+entry("new_wakeup");
\ No newline at end of file
